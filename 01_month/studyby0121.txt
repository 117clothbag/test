c语言中，当一位数组作为函数参数时，编译器总是把它解析成一个指向其首元素地址的指针。
在对指针使用时，需要开辟相应的空间，在释放之后，一定要将对应的指针置NULL

c++对C的扩展、增强：
1、双冒号::作用域运算符
	代码中对同一变量多次声明，在代码块使用时，局部变量会将全局变量隐藏。若在代码块使用变量前添加::,表示为全局变量。
	::表示作用域解释符，如常见的std::cout,表示cout是std作用域下的标识符
2、命名空间namespace
	主要用来解决命名冲突的问题，如多人开发的不同模块中使用了相同的变量名和函数名，这时可以使用命名空间，将不同的模块分隔开
	注意事项：
	1）必须在全局作用域下的声明
	2）命名空间下可以放函数，变量，结构体和类
	3）命名空间可以嵌套命名空间
	4）命名空间是开放的，可以随时加入新成员(添加时只需要再次声明namespace，然后添加新成员即可)
	5）无名或者匿名空间，相当于static变量
	6）可以对命名空间起别名
	
	使用整个命名空间  		using namespace namespace
	使用命名空间的变量		using name::variable
	使用默认命名空间的变量	::variable[其实默认的命名空间指的是全局变量]
3、using声明和using编译指令

重载加法运算符：
Box operator+(const Box &b) {
	Box box;
	box.length = this->length + b.length;
	
	return box;
}

重载等号运算符：
int operator==(const Box &b) {
	if(this->length != b.length) {
		cout << "Have some per unequal." << endl;
		return 1;
	}
	return 0;
}

加法
Box3 = Box1 + Box2；
等法
if(!(Box1 == Box2)){}

多态：
构成多态的两个条件：
1.调用函数的对象必须是指针或者引用
2.被调用的函数必须是虚函数，且完成了虚函数的重写
class Person {
Public：
	virtual void BuyTicket() {
		std::cout << "person 1111" << std::endl;
	}

}；

class Child::public Person {
Public：
	void BuyTicket() {
		std::cout << "child 1111" << std::endl;
	}

}；

void fun(Person &obj)
{
	obj.BuyTicket();
}

Person p;
Child c;

fun(p);	// result = "person 1111"
fun(c); // result = "child 1111"

异常处理机制：
throw XXX;
try {}
catch(...)
{}
