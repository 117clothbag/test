【vector】
访问和操作vector元素
for(int i = 0; i < v1.size(); i++) {
	cout << v1[i] << endl;
	v1[i] = 100;
	cout << v1[i] << endl;
}

[后续理解下]注意：虽然vector对象可以动态增长，但是也会有一点副作用，一直的一个限制就是不能再范围for循环中向vector对象添加元素。另一个限制就是任何一种可能改变vector对象容量的操作，不如push_back，都会使该迭代器失效。
总而言之就是：但凡使用了迭代器的循环体，都不要向迭代器所属的容器添加元素！

【set】
set和vector差不多，它跟vector的唯一区别就是，set里面的元素是有序，且是唯一的，只要你往set里面添加元素，他就会自动排序，而且如果你添加的元素set里面本来就存在，那么这次操作就不执行。要想用set先加入头文件 [#include <set>]

#include<iostream>
#include<set>
using namespace std;
int main(){
    set<int> myset;
    myset.insert(4);
    myset.insert(7);
    myset.insert(2);
    myset.insert(0);
    myset.insert(4);
    set<int>::iterator it;
    for(it = myset.begin(); it != myset.end(); it++){
        cout<< *it;   //输出结果是：0247
    }
}

【list】
list就是链表，在C语言中我们想使用链表都是自己实现的
list是一个双向链表，而单链表对应的容器则是foward_list.
list即双向链表的优点是插入和删除元素都比较快捷，缺点是不能随机访问元素。
初始化的方式就大同小异了，跟vector基本相同。要想用list就先加个头文件 [#include <list>]

#include <iostream>
#include <list>
#include <string>
using namespace std;
template <typename T>
void showlist(list<T> v)
{
    for (list<T>::iterator it = v.begin(); it != v.end(); it++)
    {
        cout << *it;
    }
    cout << endl;
}

int main()
{
    list<int> L1{ 1,2,3,4,5,5,6,7,7 };
    showlist(L1);
    list<double> L2;
    list<char> L3(10);
    list<int> L4(5, 10); //将元素都初始化为10
    showlist(L4);
    
    return 0;
} 
值得注意的是list容器不能调用algorithm下的sort函数进项排序，因为sort函数要求容器必须可以随机存储，而list做不到。所以，list自己做了一个自己用的排序函数。  L1.sort();

【map】
map运用了哈希表地址映射的思想，用字符串作为key值去查询操作对应的value
要想使用map得先加头文件[#include <map>]

#include <iostream>
#include <map>
#include <string>
using namespace std;
void showmap(map<string, int> v)
{
    for (map<string, int>::iterator it = v.begin(); it != v.end(); it++)
    {
        cout << it->first << "  " << it->second << endl;  //注意用法，不是用*it来访问了。first表示的是key，second存的是value
    }
    cout << endl;
}
int main()
{
    map<string, int> m1; //<>里的第一个参数表示key的类型,第二个参数表示value的类型
    m1["Kobe"] = 100;
    m1["James"] = 99;
    m1["Curry"] = 98;
    string s("Jordan");
    m1[s] = 90;
    cout << m1["Kobe"] << endl;
    cout << m1["Jordan"] << endl;
    cout << m1["Durant"] << endl; //不存在这个key，就显示0
    m1.erase("Curry");//通过关键字来删除
    showmap(m1);
    m1.insert(pair<string, int>("Harris", 89)); //也可以通过insert函数来实现增加元素
    showmap(m1);
    m1.clear(); //清空全部
    system("pause");
    return 0;
}



