c简介：
c语言所产生的代码运行速度与汇编语言的代码速度几乎一样，所以采用c语言作为系统的开发语言[操作系统、语言汇编器、汇编器、文本编辑器、打印机、网络驱动器、现代程序、数据库、语言解释器、实体工具]

c环境设置：
linux上检查是否安装了gcc  [gcc -v]

c程序结构：
c程序主要包括：预处理指令、函数、变量、语句&表达式、注释
gcc hello.c;./a.out
gcc test1.c test2.c -o main;./main

c基本语法：

c数据类型：
整数类型、浮点数类型、void类型
类型决定了变量的存储大小和布局

c常量：
常量是固定值，在程序的执行期间不会改变，可以是整数常量、浮点常量、字符常量、字符串常量、定义常量[#define XXX XXX]、const 关键字

c存储类:
auto存储类：所有局部变量默认的存储类
register存储类：用于定义存储在寄存器中而不是RAM中的局部变量，因此也不能用'&'运算符
static存储类：在程序的生命周期内保持局部变量的存在
extern存储类：用于提供一个全局变量的引用，全局变量对所有程序文件都是可见的

c运算符：
算数运算符、关系运算符、逻辑运算符、位运算符、赋值运算符、杂项运算符[sizeof()、&、*、？：]

c判断：
if...else if...else

c循环：
while for  do...while
循环控制语句[break、continue]

c函数：
函数声明告诉编译器的名称、返回类型、参数
函数定义提供了函数的实际主体

c作用规则：
局部变量、全局变量、形式参数

c数组：
可以存储一个固大小的相同数据类型元素的顺序集合、数组传参、二维数组

c enum[枚举]

c排序算法：
选择排序、冒泡排序

c指针：
指针数组、数组指针、函数指针、回调函数[函数指针作为某个函数的参数]

c字符串：

c结构体：
struct、结构体初始化、结构体指针、位域
struct bs{
	unsigned a:1;
	unsigned b:3;
	unsigned c:4;
}bit,*pbit;

c typedef
typedef仅限于为类型定义符号名称
#define不仅可以为类型定义别名，也能为数值定义别名
typedef是由编译器执行解释
#define语句是由预编译器进行处理

c输入&输出：
getchar()  putchar()  gets()  puts()

c文件读写：
fgets()  fgets()  fclose()  feof()

c预处理器
#define XXX XXX

c头文件：
只引用一次头文件：为了防止一个头文件被引用两次，标准做法是把整个内容放在条件编译中
#ifndef HEADER_FILE
#define HEADER_FILE
#include "header.h"
#endif

有条件引用
#if SYSTEM1
	#include "system1.h"
#elif SYSTEM2
	#include "system2.h"
#elif SYSTEM3
	#include "system3.h"
...
#endif

c强制类型转换
c错误处理
c递归

c可变参数
#include <stdio.h>
#include <stdarg.h>

void myPrintf(int num, ...)
{
	int i = 0;
	va_list valist;
	va_start(valist, num);
	for(i = 0; i < num; i++) {
		printf("%s\n", va_arg(valist, char*));
	}
	va_end(va_list);
}

double average(int num, ...)
{
	int i = 0;
	va_list valist;
	double sum = 0.0;	
	va_start(valist, num);
	for(i = 0; i < num; i++) {
		sum += va_arg(valist, int);
	}
	va_end(va_list);
	return sum / num;
}

int main()
{
	myPrintf(4, "aa", "bb", "cc", "dd");
	printf("Avarage of 2, 3, 4, 5 = %f\n", average(4, 2, 3, 4, 5));
	return 0;
}

c内存管理：
void *malloc(int num)；
void *realloc(void *address, int newsize);//重新分配内存，把内存扩展到newsize
void free(void *address);

c命令行参数
argc是指传入参数的个数
argv[]是一个指针数组，指向传递给程序的每个参数



